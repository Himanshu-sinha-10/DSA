Running median
Send Feedback
You are given a stream of N integers. For every i-th integer added to the running list of integers, print the resulting median.
Print only the integer part of the median.
Input Format :
The first line of input contains an integer N, denoting the number of integers in the stream.

The second line of input contains 'N' integers separated by a single space.
Output Format :
Print the running median for every integer added to the running list on a new line.
Input Constraints
1 <= N <= 10^5
1 <= Ai <= 10^5

Time Limit: 1sec
Sample Input 1 :
6
6 2 1 3 7 5
Sample Output 1 :
6
4
2
2
3
4
Explanation of Sample Output 1 :
S = {6}, median = 6
S = {6, 2} -> {2, 6}, median = 4
S = {6, 2, 1} -> {1, 2, 6}, median = 2
S = {6, 2, 1, 3} -> {1, 2, 3, 6}, median = 2
S = {6, 2, 1, 3, 7} -> {1, 2, 3, 6, 7}, median = 3
S = {6, 2, 1, 3, 7, 5} -> {1, 2, 3, 5, 6, 7}, median = 4
Sample Input 2 :
5
5 4 3 2 1
Sample Output 2 :
5
4
4
3
3



solution:


#include<bits/stdc++.h>
void findMedian(int arr[], int n){
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Print output as specified in the question.
     */
   	
    priority_queue<int> s; // max-heap
    priority_queue<int, vector<int>, greater<int> > g; // min-heap
    
    int median=arr[0];
    s.push(arr[0]);
    
    cout<<arr[0]<<endl;
    
    for(int i=1;i<n;i++)
    {
        int x=arr[i];
        
        if(s.size() > g.size())
        {
            if(x < median)
            {
                g.push(s.top()); 
                s.pop(); 
                s.push(x); 
            }
            else 
            {
                g.push(x);
            }
            median=(s.top()+g.top())/2;
        }
        
        else if(s.size()==g.size())
        {
            if(x < median)
            {
                s.push(x);
                median=s.top();
            }
            else 
            {
                g.push(x);
                median=g.top();
            }
            
        }
        
        else 
        {
             if (x > median) 
            { 
                s.push(g.top()); 
                g.pop(); 
                g.push(x); 
            } 
            else
            s.push(x); 
            median = (s.top() + g.top())/2;
        }
        
        cout<<median<<endl;
    }
}















