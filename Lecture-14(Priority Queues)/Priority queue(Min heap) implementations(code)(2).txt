#include <iostream>
#include<vector>

using namespace std;

class Priority_queue
{
    vector<int> pq;
    
    public:
    
    bool isEmpty()
    {
        return pq.size()==0;
    }
    
    int getSize()
    {
        return pq.size();
    }
    
    int getMin()
    {
        if(isEmpty())
        return 0;
        
        else return pq[0];
    }
    
    void insert(int element)
    {
        pq.push_back(element);
        
        int childIndex=pq.size()-1; // newely entered node in the CBT
                                    // there are two conditions to break this while loop, 1st if during up heapify the newely entered 
                                     // node reaches root position(condition: childIndex > 0) or its correct position(else break statement)
                                    // because when childindex becomes 0 we have reached root node
        while(childIndex > 0)     
        {
        int parentIndex= (childIndex-1)/2;
        if(pq[parentIndex] > pq[childIndex]) // if this is true swap the two
        {
            int temp=pq[parentIndex];
            pq[parentIndex]=pq[childIndex];
            pq[childIndex]=temp;
        }
         
         else break;  // when during up-heapify the element reached its correct position
         
         // when swapping is done the parent becomes new child
         childIndex=parentIndex;
        }
         
    }
    
    int removeMin()
    {
        int ans=pq[0];
        pq[0]=pq[pq.size()-1];
        pq.pop_back();
        
        //down heapify
        int parentIndex=0;
        int leftChildIndex=(2*parentIndex)+1;
        int rightChildIndex=(2*parentIndex)+2;
        
        while(leftChildIndex < pq.size()) // while left child is within range of size of the array
        {
        int minIndex=parentIndex;
        
        if(pq[leftChildIndex] < pq[minIndex])
        minIndex=leftChildIndex;
        
        if(rightChildIndex < pq.size() && pq[rightChildIndex] < pq[minIndex]) // left child is within range does
                                                                            // not imply rightchild is also is in range
        minIndex=rightChildIndex;
        
        if(minIndex==parentIndex) // while down heapify element has reached its correct position
        break;
        
        int temp=pq[minIndex];
        pq[minIndex]=pq[parentIndex];
        pq[parentIndex]=temp;
        
        parentIndex=minIndex;
        leftChildIndex=(2*parentIndex)+1;
        rightChildIndex=(2*parentIndex)+2;
        }
        
        return ans;
        
    }
    
    
    
};

int main() {

 Priority_queue p;
 cout<<p.isEmpty()<<endl;
 cout<<p.getSize()<<endl;
 p.insert(1);
 p.insert(2);
 p.insert(3);
 p.insert(4);
 p.insert(5);
 p.insert(6);
 p.insert(0);
 cout<<p.getMin()<<endl;
 cout<<p.isEmpty()<<endl;
 cout<<p.getSize()<<endl;
 
 cout<<"removed minimum element is: "<<p.removeMin()<<endl;
 cout<<"removed minimum element is: "<<p.removeMin()<<endl;
 cout<<"removed minimum element is: "<<p.removeMin()<<endl;
return 0;
}